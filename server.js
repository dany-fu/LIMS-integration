// Author: Dany Fu (danyfu@bu.edu)

const axios = require("axios").default;
const csv = require("fast-csv");
const fs = require("fs");
const argv = require("minimist")(process.argv.slice(2));
const winston = require('winston');
const logger = winston.createLogger({
  level: 'info',
  transports: [
    // - Write all logs with level `error` and below to `error.log`
    new winston.transports.File({ filename: 'error.log', level: 'error' }),
    // - Write all logs with level `info` and below to `combined.log`
    new winston.transports.File({ filename: 'combined.log' }),
  ],
});
const constants = require("./constants.js");


function sleep(ms) {
  return new Promise((resolve) => {
    setTimeout(resolve, ms);
  });
}

function equalsIgnoringCase(text, other) {
  return text.localeCompare(other, undefined, { sensitivity: 'accent' }) === 0;
}

/**
 * Authentication; this function must occur before any other API calls can be made
 * @param username
 * @param password
 * @returns {Promise<T>} A token is returned if the login is successful
 */
async function login(username, password) {
  username = "danyfu@bu.edu";
  password = "foobar";

  return axios
    .post(constants.ENDPOINTS.LOGIN, {
      username: username,
      password: password,
    })
    .then((res) => {
      logger.info(`Authentication status code: ${res.status}`);
      if(res.status === 200){
        axios.defaults.headers.common['Authorization'] = res.data.token;
      }
      return res.status;
    })
    .catch((error) => {
      logger.error(error);
      return null;
    });
}

/**
 * Update a custom field for a sample
 * @param sampleId The unique ID of the sample generated by eLabs
 * @param key Name of the field to be updated
 * @param value Value of the field to be updated
 * @param type The field type (dropdown, text, radio button, etc)
 * @returns {Promise<void>}
 */
async function updateMeta({sampleId, key, value, type}={}){
  return axios
    .put(`https://us.elabjournal.com/api/v1/samples/${sampleId}/meta`, {
      key: key,
      value: value,
      sampleDataType: type,
    })
    .then((res) => {
      logger.info(`Update sample: ${sampleId}, field:${key}, statusCode: ${res.status}`);
      logger.info(res.data);
    })
    .catch((error) => {
      logger.error(error);
    });
}

/**
 * Return all Patient Samples and their meta fields that matches a search term
 * @param searchTerm
 * @returns {Promise<void>}
 */
async function searchForPatienSample(searchTerm){
  await login();

  return axios.get(`${constants.ENDPOINTS.GET_ALL_PATIENT_SAMPLES}&search=${searchTerm}`)
    .then((res) => {
      logger.info(`statusCode: ${res.status}`);
      return res.data;
    })
    .catch((error) => {
      logger.error(error);
    });
}

/**
 * Find a Patient Sample with the given barcode (which is also its name)
 * @param barcode
 * @returns {Promise<void>} Sample object if found, else Null
 */
async function getPatientSample(barcode){
  return axios.get(`${constants.ENDPOINTS.GET_PATIENT_SAMPLE}&name=${barcode}`)
    .then((res) => {
      logger.info(`statusCode: ${res.status}`);
      if(res.status === 200 && res.data.data.length !== 0){
        if(res.data.data.length > 1){
          logger.warn(`More than one sample found with name ${barcode}`);
          return null;
        }
        return res.data.data[0].sampleID;
      }
      return null;
    })
    .catch((error) => {
      logger.error(error);
      return null;
    });
}

/**
 * Update PatientSample with the plate barcode and well number
 * from the Sample Prep Hamilton and update status
 * @param sampleID
 * @param destBC
 * @param destWellNum
 * @returns {Promise<void>}
 */
async function samplePrepTracking(sampleID, destBC, destWellNum){
  updateMeta({sampleId:sampleID,
    key: constants.META.DEEPWELL_BC.KEY,
    value: destBC,
    type: constants.META.DEEPWELL_BC.TYPE}); //update RNA Plate Barcode
  updateMeta({sampleId:sampleID,
    key: constants.META.DEEPWELL_WELL_NUM.KEY,
    value: destWellNum,
    type: constants.META.DEEPWELL_WELL_NUM.TYPE}); //update RNA Plate Well Location
  updateMeta({sampleId:sampleID,
    key: constants.META.STATUS.KEY,
    value: constants.STATUS_VAL.SAMPLE_PREP_DONE,
    type: constants.META.STATUS.TYPE}); //update status to "Sample Transferred To 96-Well Plate"
}

/**
 * Updates PatientSample with the plate barcode and well number
 * from the RNA Extraction Hamilton and update status
 * @param sampleID
 * @param destBC
 * @param destWellNum
 * @returns {Promise<void>}
 */
async function rnaExtractionTracking(sampleID, destBC, destWellNum){
  updateMeta({sampleId:sampleID,
    key: constants.META.RNA_PLATE_BC.KEY,
    value: destBC,
    type: constants.META.RNA_PLATE_BC.TYPE}); //update RNA Plate Barcode
  updateMeta({sampleId:sampleID,
    key: constants.META.RNA_PLATE_WELL_NUM.KEY,
    value: destWellNum,
    type: constants.META.RNA_PLATE_WELL_NUM.TYPE}); //update RNA Plate Well Location
  updateMeta({sampleId:sampleID,
    key: constants.META.STATUS.KEY,
    value: constants.STATUS_VAL.RNA_DONE,
    type: constants.META.STATUS.TYPE}); //update status to "RNA Extracted"
}

/**
 * Updates PatientSample with the plate barcode and well number
 * from the qPCR Prep Hamilton and update status
 * @param sampleID
 * @param destBC
 * @param destWellNum
 * @returns {Promise<void>}
 */
function qPCRPrepTracking(sampleID, destBC, destWellNum){
  updateMeta({sampleId:sampleID,
              key: constants.META.QPCR_PLATE_BC.KEY,
              value: destBC,
              type: constants.META.QPCR_PLATE_BC.TYPE}); //update qPCR Plate Barcode
  updateMeta({sampleId:sampleID,
              key: constants.META.QPCR_PLATE_WELL_NUM.KEY,
              value: destWellNum,
              type: constants.META.QPCR_PLATE_WELL_NUM.TYPE}); //update qPCR Plate Well Location
  updateMeta({sampleId:sampleID,
              key: constants.META.STATUS.KEY,
              value: constants.STATUS_VAL.QPCR_PREP_DONE,
              type: constants.META.STATUS.TYPE}); //update status to "qPCR Reactions Prepared"
}

/**
 * Calls the appropriate update function based on Hamilton protocol
 * @param csvRow row in the CSV
 */
async function lineageTracking(csvRow){
  let protocol = csvRow[constants.HAMILTON_LOG_HEADERS.PROTOCOL];
  if (!protocol || (!(protocol in constants.ORIGIN_VAL))){
    let protocolVals = Object.keys(constants.ORIGIN_VAL);
    logger.error(`${protocol} is not recognized as a supported process. Must be one of the 
                  ${protocolVals.length} values: ${Object.keys(constants.ORIGIN_VAL)}. 
                  Index ${csvRow[constants.HAMILTON_LOG_HEADERS.INDEX]} not processed.`);
    process.exitCode = 8;
    return;
  }

  let sampleBC = csvRow[constants.HAMILTON_LOG_HEADERS.SAMPLE_TUBE_BC];
  let sampleID = await getPatientSample(sampleBC);
  if(!sampleID){
    logger.error(`Sample for barcode ID ${sampleBC} not found`);
    process.exitCode = 8;
    return;
  }

  let destBC = csvRow[constants.HAMILTON_LOG_HEADERS.DEST_BC];
  let destWellNum = csvRow[constants.HAMILTON_LOG_HEADERS.DEST_WELL_NUM];

  switch(protocol){
    case constants.ORIGIN_VAL.SAMPLE_PREP:
      samplePrepTracking(sampleID, destBC, destWellNum);
      break;
    case constants.ORIGIN_VAL.RNA_EXTRACTION:
      rnaExtractionTracking(sampleID, destBC, destWellNum);
      break;
    case constants.ORIGIN_VAL.QPCR_PREP:
      qPCRPrepTracking(sampleID, destBC, destWellNum);
      break;
  }
}

/**
 * Update "call" of the test, results are POSITIVE, NEGATIVE, or INVALID
 * @param csvRow
 * @returns {Promise<void>}
 */
async function updateTestResult(csvRow){
  let result = csvRow[constants.CALL];
  updateMeta({sampleId:sampleID,
    key: constants.META.RESULT.KEY,
    value: result,
    type: constants.META.RESULT.TYPE}); //update COVID-19 Test Result
  updateMeta({sampleId:sampleID,
    key: constants.META.STATUS.KEY,
    value: constants.STATUS_VAL.QPCR_DONE,
    type: constants.META.STATUS.TYPE}); //update status to "qPCR Run"
}

/**
 * Updates PatientSample with CT values from the QuantStudio
 * @param csvRow
 * @returns {Promise<void>}
 */
async function updateCTValues(csvRow, sampleIdDict){
  let ctN1;
  let ctN2;
  let ctRP;
  let wellNum = csvRow[constants.QPCR_LOG_HEADERS.WELL];
  updateMeta({sampleId:sampleID,
    key: constants.META.CT_N1.KEY,
    value: ctN1,
    type: constants.META.CT_N1.TYPE}); //update N1 CT value
  updateMeta({sampleId:sampleID,
    key: constants.META.CT_N2.KEY,
    value: ctN2,
    type: constants.META.CT_N2.TYPE}); //update N2 CT value
  updateMeta({sampleId:sampleID,
    key: constants.META.CT_RP.KEY,
    value: ctRP,
    type: constants.META.CT_RP.TYPE}); //update Rnase P CT value
}

async function parse_logfile(logfile){
  logger.info(`Logged: ${new Date().toLocaleString("en-US", {timeZone: "America/New_York"})}\n`);
  logger.info(logfile);

  let auth = await login();
  if (!auth || auth !== 200){
    logger.error(`Failed to log into eLabs.`);
    process.exitCode = 8;
    return;
  }

  let sampleIdDict = {};

  fs.createReadStream(logfile)
    .pipe(csv.parse({ headers: true }))
    .on('error', (error) => {
      logger.error(error);
      process.exitCode = 8;
    })
    .on('data', (row) => {
      if (Object.keys(row).includes(constants.HAMILTON_LOG_HEADERS.PROTOCOL)){
        lineageTracking(row);
      } else if (Object.keys(row).includes(constants.QPCR_LOG_HEADERS.CQ)){
        updateCTValues(row, sampleIdDict);
      } else if (Object.keys(row).includes(constants.QPCR_LOG_HEADERS.CALL)){
        updateTestResult(row);
      }

    })
    .on('end', (rowCount) => logger.info(`Parsed ${rowCount} records`));
}

/**
 * file: path of the CSV file to be parsed
 */
parse_logfile(argv.file);
process.on('exit', (code) => {
  logger.info('Process exit event with code: ', code);
});
